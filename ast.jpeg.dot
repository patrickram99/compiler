digraph AST {
  node [shape=box];
Node1 [label="Program"];
Node2 [label="LetStatement"];
Node3 [label="Variable: pogo"];
Node2 -> Node3;
Node4 [label="InfixExpression: *"];
Node5 [label="IntegerLiteral: 5"];
Node4 -> Node5;
Node6 [label="IntegerLiteral: 2"];
Node4 -> Node6;
Node2 -> Node4;
Node1 -> Node2;
Node7 [label="ExpressionStatement"];
Node8 [label="CallExpression"];
Node9 [label="Variable: SpeakNow"];
Node8 -> Node9;
Node10 [label="Variable: pogo"];
Node8 -> Node10;
Node7 -> Node8;
Node1 -> Node7;
Node11 [label="ExpressionStatement"];
Node12 [label="CallExpression"];
Node13 [label="Variable: SpeakNow"];
Node12 -> Node13;
Node14 [label="String: Holaa"];
Node12 -> Node14;
Node11 -> Node12;
Node1 -> Node11;
Node15 [label="ExpressionStatement"];
Node16 [label="IfExpression"];
Node17 [label="InfixExpression: =="];
Node18 [label="IntegerLiteral: 5"];
Node17 -> Node18;
Node19 [label="Variable: pogo"];
Node17 -> Node19;
Node16 -> Node17;
Node20 [label="BlockStatement"];
Node21 [label="ExpressionStatement"];
Node22 [label="CallExpression"];
Node23 [label="Variable: SpeakNow"];
Node22 -> Node23;
Node24 [label="Boolean: true"];
Node22 -> Node24;
Node21 -> Node22;
Node20 -> Node21;
Node16 -> Node20;
Node25 [label="BlockStatement"];
Node26 [label="ExpressionStatement"];
Node27 [label="CallExpression"];
Node28 [label="Variable: SpeakNow"];
Node27 -> Node28;
Node29 [label="Boolean: false"];
Node27 -> Node29;
Node26 -> Node27;
Node25 -> Node26;
Node16 -> Node25;
Node15 -> Node16;
Node1 -> Node15;
}
