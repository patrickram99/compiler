digraph AST {
  node [shape=box];
Node1 [label="Program"];
Node2 [label="LetStatement"];
Node3 [label="Variable: fibonacci"];
Node2 -> Node3;
Node4 [label="FunctionLiteral"];
Node5 [label="Variable: x"];
Node4 -> Node5;
Node6 [label="BlockStatement"];
Node7 [label="ExpressionStatement"];
Node8 [label="IfExpression"];
Node9 [label="InfixExpression: =="];
Node10 [label="Variable: x"];
Node9 -> Node10;
Node11 [label="IntegerLiteral: 0"];
Node9 -> Node11;
Node8 -> Node9;
Node12 [label="BlockStatement"];
Node13 [label="ReturnStatement"];
Node14 [label="IntegerLiteral: 0"];
Node13 -> Node14;
Node12 -> Node13;
Node8 -> Node12;
Node15 [label="BlockStatement"];
Node16 [label="ExpressionStatement"];
Node17 [label="IfExpression"];
Node18 [label="InfixExpression: =="];
Node19 [label="Variable: x"];
Node18 -> Node19;
Node20 [label="IntegerLiteral: 1"];
Node18 -> Node20;
Node17 -> Node18;
Node21 [label="BlockStatement"];
Node22 [label="ReturnStatement"];
Node23 [label="IntegerLiteral: 1"];
Node22 -> Node23;
Node21 -> Node22;
Node17 -> Node21;
Node24 [label="BlockStatement"];
Node25 [label="ExpressionStatement"];
Node26 [label="InfixExpression: +"];
Node27 [label="CallExpression"];
Node28 [label="Variable: fibonacci"];
Node27 -> Node28;
Node29 [label="InfixExpression: -"];
Node30 [label="Variable: x"];
Node29 -> Node30;
Node31 [label="IntegerLiteral: 1"];
Node29 -> Node31;
Node27 -> Node29;
Node26 -> Node27;
Node32 [label="CallExpression"];
Node33 [label="Variable: fibonacci"];
Node32 -> Node33;
Node34 [label="InfixExpression: -"];
Node35 [label="Variable: x"];
Node34 -> Node35;
Node36 [label="IntegerLiteral: 2"];
Node34 -> Node36;
Node32 -> Node34;
Node26 -> Node32;
Node25 -> Node26;
Node24 -> Node25;
Node17 -> Node24;
Node16 -> Node17;
Node15 -> Node16;
Node8 -> Node15;
Node7 -> Node8;
Node6 -> Node7;
Node4 -> Node6;
Node2 -> Node4;
Node1 -> Node2;
Node37 [label="ExpressionStatement"];
Node38 [label="InfixExpression: +"];
Node39 [label="CallExpression"];
Node40 [label="Variable: fibonacci"];
Node39 -> Node40;
Node41 [label="IntegerLiteral: 3"];
Node39 -> Node41;
Node38 -> Node39;
Node42 [label="String: a,jsdadsklkjlads"];
Node38 -> Node42;
Node37 -> Node38;
Node1 -> Node37;
}
